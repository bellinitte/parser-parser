let e,t=new TextDecoder("utf-8",{ignoreBOM:!0,fatal:!0});t.decode();let n=null;function r(){return null!==n&&n.buffer===e.memory.buffer||(n=new Uint8Array(e.memory.buffer)),n}let a=0,o=new TextEncoder("utf-8");const s="function"==typeof o.encodeInto?function(e,t){return o.encodeInto(e,t)}:function(e,t){const n=o.encode(e);return t.set(n),{read:e.length,written:n.length}};function i(e,t,n){if(void 0===n){const n=o.encode(e),s=t(n.length);return r().subarray(s,s+n.length).set(n),a=n.length,s}let i=e.length,c=t(i);const f=r();let l=0;for(;l<i;l++){const t=e.charCodeAt(l);if(t>127)break;f[c+l]=t}if(l!==i){0!==l&&(e=e.slice(l)),c=n(c,i,i=l+3*e.length);const t=r().subarray(c+l,c+i);l+=s(e,t).written}return a=l,c}class c{static __wrap(e){const t=Object.create(c.prototype);return t.ptr=e,t}free(){const t=this.ptr;this.ptr=0,e.__wbg_ebnfparser_free(t)}constructor(t){var n=i(t,e.__wbindgen_malloc,e.__wbindgen_realloc),r=a,o=e.ebnfparser_new(n,r);return c.__wrap(o)}check(t){var n=i(t,e.__wbindgen_malloc,e.__wbindgen_realloc),r=a;return 0!==e.ebnfparser_check(this.ptr,n,r)}}async function f(n){void 0===n&&(n=import.meta.url.replace(/\.js$/,"_bg.wasm"));const a={wbg:{}};a.wbg.__wbindgen_throw=function(e,n){throw new Error((a=e,o=n,t.decode(r().subarray(a,a+o))));var a,o},("string"==typeof n||"function"==typeof Request&&n instanceof Request||"function"==typeof URL&&n instanceof URL)&&(n=fetch(n));const{instance:o,module:s}=await async function(e,t){if("function"==typeof Response&&e instanceof Response){if("function"==typeof WebAssembly.instantiateStreaming)try{return await WebAssembly.instantiateStreaming(e,t)}catch(t){if("application/wasm"==e.headers.get("Content-Type"))throw t;console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n",t)}const n=await e.arrayBuffer();return await WebAssembly.instantiate(n,t)}{const n=await WebAssembly.instantiate(e,t);return n instanceof WebAssembly.Instance?{instance:n,module:e}:n}}(await n,a);return e=o.exports,f.__wbindgen_wasm_module=s,e}var l=Object.freeze({__proto__:null,EbnfParser:c,default:f});export default async()=>(await f("parser-parser-core.wasm"),l);
